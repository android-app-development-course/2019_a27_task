// Code generated by protoc-gen-go. DO NOT EDIT.
// source: login.proto

package service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LoginInfo struct {
	PhoneNum             string   `protobuf:"bytes,1,opt,name=phoneNum,proto3" json:"phoneNum,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginInfo) Reset()         { *m = LoginInfo{} }
func (m *LoginInfo) String() string { return proto.CompactTextString(m) }
func (*LoginInfo) ProtoMessage()    {}
func (*LoginInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c21677aa7f4e4f, []int{0}
}

func (m *LoginInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginInfo.Unmarshal(m, b)
}
func (m *LoginInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginInfo.Marshal(b, m, deterministic)
}
func (m *LoginInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginInfo.Merge(m, src)
}
func (m *LoginInfo) XXX_Size() int {
	return xxx_messageInfo_LoginInfo.Size(m)
}
func (m *LoginInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LoginInfo proto.InternalMessageInfo

func (m *LoginInfo) GetPhoneNum() string {
	if m != nil {
		return m.PhoneNum
	}
	return ""
}

func (m *LoginInfo) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type Result struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMsg             string   `protobuf:"bytes,2,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c21677aa7f4e4f, []int{1}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Result) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

type Token struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Registered           bool     `protobuf:"varint,2,opt,name=registered,proto3" json:"registered,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c21677aa7f4e4f, []int{2}
}

func (m *Token) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Token.Unmarshal(m, b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Token.Marshal(b, m, deterministic)
}
func (m *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(m, src)
}
func (m *Token) XXX_Size() int {
	return xxx_messageInfo_Token.Size(m)
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func (m *Token) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Token) GetRegistered() bool {
	if m != nil {
		return m.Registered
	}
	return false
}

func init() {
	proto.RegisterType((*LoginInfo)(nil), "task.LoginInfo")
	proto.RegisterType((*Result)(nil), "task.Result")
	proto.RegisterType((*Token)(nil), "task.Token")
}

func init() { proto.RegisterFile("login.proto", fileDescriptor_67c21677aa7f4e4f) }

var fileDescriptor_67c21677aa7f4e4f = []byte{
	// 256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x1b, 0x31, 0x69, 0x32, 0x2d, 0x08, 0x83, 0x87, 0xd0, 0x83, 0xc8, 0x82, 0xa8, 0x08,
	0x39, 0xe8, 0x59, 0x0f, 0xf6, 0x24, 0x54, 0x0f, 0xab, 0x27, 0x6f, 0x35, 0x8e, 0x69, 0x48, 0xcd,
	0x94, 0x9d, 0x8d, 0x7e, 0x33, 0x3f, 0x9f, 0x64, 0x77, 0x53, 0x0a, 0x85, 0xde, 0xf6, 0xbd, 0xdf,
	0xfc, 0x7b, 0x2c, 0x4c, 0xd6, 0x5c, 0xd5, 0x6d, 0xb1, 0x31, 0x6c, 0x19, 0x8f, 0xed, 0x52, 0x1a,
	0x35, 0x87, 0x6c, 0xd1, 0x9b, 0x4f, 0xed, 0x17, 0xe3, 0x0c, 0xd2, 0xcd, 0x8a, 0x5b, 0x7a, 0xe9,
	0xbe, 0xf3, 0xe8, 0x3c, 0xba, 0xca, 0xf4, 0x56, 0x3b, 0xb6, 0x14, 0xf9, 0x65, 0xf3, 0x99, 0x1f,
	0x05, 0x16, 0xb4, 0x7a, 0x80, 0x44, 0x93, 0x74, 0x6b, 0x8b, 0x39, 0x8c, 0xa5, 0x2b, 0x4b, 0x12,
	0x71, 0x03, 0x52, 0x3d, 0xc8, 0xbe, 0x9f, 0x8c, 0x61, 0xf3, 0x2c, 0xd5, 0xd0, 0x3f, 0x68, 0x75,
	0x0f, 0xf1, 0x1b, 0x37, 0xd4, 0xe2, 0x29, 0xc4, 0xb6, 0x7f, 0x84, 0xed, 0x5e, 0xe0, 0x19, 0x80,
	0xa1, 0xaa, 0x16, 0x4b, 0x86, 0xfc, 0xf2, 0x54, 0xef, 0x38, 0xb7, 0x7f, 0x11, 0x4c, 0x5d, 0x88,
	0x57, 0x32, 0x3f, 0x75, 0x49, 0x78, 0x03, 0xa9, 0x0e, 0x18, 0x4f, 0x8a, 0x3e, 0x67, 0xb1, 0x0d,
	0x39, 0x9b, 0x7a, 0xc3, 0x1f, 0xac, 0x46, 0x78, 0x09, 0xb1, 0x83, 0xfb, 0x95, 0x13, 0x6f, 0xb8,
	0xd3, 0xd4, 0x08, 0x2f, 0x20, 0x59, 0x70, 0xc5, 0x9d, 0xc5, 0x5d, 0xb0, 0x37, 0xef, 0x1a, 0x60,
	0xbe, 0xa2, 0xb2, 0xf1, 0x89, 0x0e, 0x95, 0x3e, 0x66, 0xef, 0x63, 0xf1, 0x27, 0x7f, 0x24, 0xee,
	0x53, 0xee, 0xfe, 0x03, 0x00, 0x00, 0xff, 0xff, 0x14, 0xe0, 0xff, 0xb8, 0xa3, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LoginServiceClient is the client API for LoginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoginServiceClient interface {
	Register(ctx context.Context, in *LoginInfo, opts ...grpc.CallOption) (*Result, error)
	Login(ctx context.Context, in *LoginInfo, opts ...grpc.CallOption) (*Token, error)
	Logout(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Result, error)
	CheckToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Result, error)
}

type loginServiceClient struct {
	cc *grpc.ClientConn
}

func NewLoginServiceClient(cc *grpc.ClientConn) LoginServiceClient {
	return &loginServiceClient{cc}
}

func (c *loginServiceClient) Register(ctx context.Context, in *LoginInfo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/task.LoginService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) Login(ctx context.Context, in *LoginInfo, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/task.LoginService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) Logout(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/task.LoginService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) CheckToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/task.LoginService/CheckToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginServiceServer is the server API for LoginService service.
type LoginServiceServer interface {
	Register(context.Context, *LoginInfo) (*Result, error)
	Login(context.Context, *LoginInfo) (*Token, error)
	Logout(context.Context, *Token) (*Result, error)
	CheckToken(context.Context, *Token) (*Result, error)
}

// UnimplementedLoginServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLoginServiceServer struct {
}

func (*UnimplementedLoginServiceServer) Register(ctx context.Context, req *LoginInfo) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedLoginServiceServer) Login(ctx context.Context, req *LoginInfo) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedLoginServiceServer) Logout(ctx context.Context, req *Token) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (*UnimplementedLoginServiceServer) CheckToken(ctx context.Context, req *Token) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckToken not implemented")
}

func RegisterLoginServiceServer(s *grpc.Server, srv LoginServiceServer) {
	s.RegisterService(&_LoginService_serviceDesc, srv)
}

func _LoginService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.LoginService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).Register(ctx, req.(*LoginInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.LoginService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).Login(ctx, req.(*LoginInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.LoginService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).Logout(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginService_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.LoginService/CheckToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).CheckToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

var _LoginService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "task.LoginService",
	HandlerType: (*LoginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _LoginService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _LoginService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _LoginService_Logout_Handler,
		},
		{
			MethodName: "CheckToken",
			Handler:    _LoginService_CheckToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "login.proto",
}
