// Code generated by protoc-gen-go. DO NOT EDIT.
// source: log.proto

package service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LogStatus struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ProjectID            int64    `protobuf:"varint,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Index                int64    `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Done                 bool     `protobuf:"varint,4,opt,name=done,proto3" json:"done,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogStatus) Reset()         { *m = LogStatus{} }
func (m *LogStatus) String() string { return proto.CompactTextString(m) }
func (*LogStatus) ProtoMessage()    {}
func (*LogStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{0}
}

func (m *LogStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogStatus.Unmarshal(m, b)
}
func (m *LogStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogStatus.Marshal(b, m, deterministic)
}
func (m *LogStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogStatus.Merge(m, src)
}
func (m *LogStatus) XXX_Size() int {
	return xxx_messageInfo_LogStatus.Size(m)
}
func (m *LogStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_LogStatus.DiscardUnknown(m)
}

var xxx_messageInfo_LogStatus proto.InternalMessageInfo

func (m *LogStatus) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *LogStatus) GetProjectID() int64 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

func (m *LogStatus) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *LogStatus) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

type Log struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ProjectID            int64    `protobuf:"varint,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Date                 int64    `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
	Done                 bool     `protobuf:"varint,5,opt,name=done,proto3" json:"done,omitempty"`
	Content              string   `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{1}
}

func (m *Log) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Log.Unmarshal(m, b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Log.Marshal(b, m, deterministic)
}
func (m *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(m, src)
}
func (m *Log) XXX_Size() int {
	return xxx_messageInfo_Log.Size(m)
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

func (m *Log) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Log) GetProjectID() int64 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

func (m *Log) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Log) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *Log) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func (m *Log) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func init() {
	proto.RegisterType((*LogStatus)(nil), "task.LogStatus")
	proto.RegisterType((*Log)(nil), "task.Log")
}

func init() { proto.RegisterFile("log.proto", fileDescriptor_a153da538f858886) }

var fileDescriptor_a153da538f858886 = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0x41, 0x4f, 0x83, 0x40,
	0x10, 0x85, 0xbb, 0x42, 0x69, 0x77, 0xd4, 0x98, 0x4c, 0x3c, 0x6c, 0x88, 0x07, 0x82, 0x17, 0x0e,
	0x4a, 0x8c, 0xfe, 0x02, 0x8d, 0x17, 0x13, 0x0e, 0x75, 0x7b, 0xf3, 0x86, 0xb0, 0xd9, 0x60, 0x71,
	0xa7, 0x81, 0xc5, 0xe8, 0x9f, 0xd0, 0xbf, 0x6c, 0xd8, 0xad, 0x25, 0xf1, 0xd8, 0xdb, 0x7b, 0x33,
	0x79, 0x7c, 0x8f, 0x59, 0xe0, 0x2d, 0xe9, 0x7c, 0xdb, 0x91, 0x25, 0x0c, 0x6d, 0xd9, 0x6f, 0xe2,
	0xe3, 0x96, 0x74, 0x63, 0xfc, 0x28, 0x3e, 0xdd, 0x76, 0xf4, 0xa6, 0x2a, 0xeb, 0x6d, 0xda, 0x00,
	0x2f, 0x48, 0xaf, 0x6d, 0x69, 0x87, 0x1e, 0xcf, 0x61, 0x6e, 0x69, 0xa3, 0x8c, 0x60, 0x09, 0xcb,
	0xb8, 0xf4, 0x06, 0x2f, 0x80, 0xef, 0x32, 0x4f, 0x8f, 0xe2, 0x28, 0x61, 0x59, 0x20, 0xa7, 0xc1,
	0x98, 0x69, 0x4c, 0xad, 0x3e, 0x45, 0xe0, 0x36, 0xde, 0x20, 0x42, 0x58, 0x93, 0x51, 0x22, 0x4c,
	0x58, 0xb6, 0x94, 0x4e, 0xa7, 0x3f, 0x0c, 0x82, 0x82, 0xf4, 0x41, 0x14, 0x84, 0xd0, 0x94, 0xef,
	0xca, 0x41, 0xb8, 0x74, 0xda, 0x31, 0x4a, 0xeb, 0x19, 0x81, 0x74, 0x7a, 0xcf, 0x9d, 0x4f, 0x5c,
	0x14, 0xb0, 0xa8, 0xc8, 0x58, 0x65, 0xac, 0x88, 0x5c, 0xfc, 0xcf, 0xde, 0x7e, 0x33, 0x80, 0xf1,
	0xef, 0x55, 0xf7, 0xd1, 0x54, 0x0a, 0x2f, 0x21, 0xba, 0xaf, 0xeb, 0xb1, 0x22, 0xcf, 0xc7, 0xc3,
	0xe5, 0x05, 0xe9, 0xf8, 0xc4, 0x4b, 0xa9, 0xfa, 0xa1, 0xb5, 0xe9, 0x0c, 0xaf, 0x61, 0xb9, 0x1a,
	0xda, 0xb6, 0x20, 0xdd, 0x23, 0xfa, 0xdd, 0xca, 0xd7, 0x7c, 0x1e, 0x54, 0xf7, 0x15, 0x4f, 0xd1,
	0x74, 0x76, 0xc3, 0xf0, 0x0a, 0xf8, 0x5a, 0xd9, 0xdd, 0x7d, 0xcf, 0xf6, 0x3b, 0x3f, 0xf8, 0xff,
	0xf1, 0x07, 0xfe, 0xb2, 0xe8, 0x7d, 0x99, 0xd7, 0xc8, 0xbd, 0xcf, 0xdd, 0x6f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x80, 0x7f, 0x84, 0xc3, 0xce, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogServiceClient interface {
	AddLog(ctx context.Context, in *Log, opts ...grpc.CallOption) (*Result, error)
	PullLogs(ctx context.Context, in *ProjectQuery, opts ...grpc.CallOption) (LogService_PullLogsClient, error)
	SetStatus(ctx context.Context, in *LogStatus, opts ...grpc.CallOption) (*Result, error)
}

type logServiceClient struct {
	cc *grpc.ClientConn
}

func NewLogServiceClient(cc *grpc.ClientConn) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) AddLog(ctx context.Context, in *Log, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/task.LogService/AddLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) PullLogs(ctx context.Context, in *ProjectQuery, opts ...grpc.CallOption) (LogService_PullLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LogService_serviceDesc.Streams[0], "/task.LogService/PullLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &logServicePullLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogService_PullLogsClient interface {
	Recv() (*Log, error)
	grpc.ClientStream
}

type logServicePullLogsClient struct {
	grpc.ClientStream
}

func (x *logServicePullLogsClient) Recv() (*Log, error) {
	m := new(Log)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logServiceClient) SetStatus(ctx context.Context, in *LogStatus, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/task.LogService/SetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogServiceServer is the server API for LogService service.
type LogServiceServer interface {
	AddLog(context.Context, *Log) (*Result, error)
	PullLogs(*ProjectQuery, LogService_PullLogsServer) error
	SetStatus(context.Context, *LogStatus) (*Result, error)
}

// UnimplementedLogServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLogServiceServer struct {
}

func (*UnimplementedLogServiceServer) AddLog(ctx context.Context, req *Log) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLog not implemented")
}
func (*UnimplementedLogServiceServer) PullLogs(req *ProjectQuery, srv LogService_PullLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method PullLogs not implemented")
}
func (*UnimplementedLogServiceServer) SetStatus(ctx context.Context, req *LogStatus) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStatus not implemented")
}

func RegisterLogServiceServer(s *grpc.Server, srv LogServiceServer) {
	s.RegisterService(&_LogService_serviceDesc, srv)
}

func _LogService_AddLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Log)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).AddLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.LogService/AddLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).AddLog(ctx, req.(*Log))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_PullLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProjectQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogServiceServer).PullLogs(m, &logServicePullLogsServer{stream})
}

type LogService_PullLogsServer interface {
	Send(*Log) error
	grpc.ServerStream
}

type logServicePullLogsServer struct {
	grpc.ServerStream
}

func (x *logServicePullLogsServer) Send(m *Log) error {
	return x.ServerStream.SendMsg(m)
}

func _LogService_SetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).SetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.LogService/SetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).SetStatus(ctx, req.(*LogStatus))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "task.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddLog",
			Handler:    _LogService_AddLog_Handler,
		},
		{
			MethodName: "SetStatus",
			Handler:    _LogService_SetStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullLogs",
			Handler:       _LogService_PullLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "log.proto",
}
