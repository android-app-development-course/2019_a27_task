// Code generated by protoc-gen-go. DO NOT EDIT.
// source: friend.proto

package service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("friend.proto", fileDescriptor_2b65cbc293af6bbd) }

var fileDescriptor_2b65cbc293af6bbd = []byte{
	// 158 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x2b, 0xca, 0x4c,
	0xcd, 0x4b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x29, 0x49, 0x2c, 0xce, 0x96, 0xe2,
	0xce, 0xc9, 0x4f, 0xcf, 0xcc, 0x83, 0x08, 0x49, 0xf1, 0x16, 0x14, 0xe5, 0xa7, 0x65, 0xe6, 0xa4,
	0x42, 0xb8, 0x46, 0x33, 0x18, 0xb9, 0x78, 0xdd, 0xc0, 0x5a, 0x82, 0x53, 0x8b, 0xca, 0x32, 0x93,
	0x53, 0x85, 0xb4, 0xb8, 0x38, 0x1d, 0x53, 0x52, 0x20, 0x62, 0x42, 0xbc, 0x7a, 0x20, 0x13, 0xf4,
	0x02, 0x20, 0x7a, 0xa4, 0x78, 0x20, 0xdc, 0xa0, 0xd4, 0xe2, 0xd2, 0x9c, 0x12, 0x25, 0x06, 0x21,
	0x5d, 0x2e, 0x1e, 0x97, 0xd4, 0x9c, 0xd4, 0x92, 0x54, 0xe2, 0x94, 0xeb, 0x70, 0x71, 0xb9, 0xa7,
	0x96, 0x40, 0xd4, 0x16, 0x0b, 0x71, 0x43, 0x64, 0x43, 0xf2, 0xb3, 0x53, 0xf3, 0xa4, 0x50, 0x75,
	0x2a, 0x31, 0x18, 0x30, 0x3a, 0x71, 0x46, 0xb1, 0x17, 0x43, 0xdc, 0x94, 0xc4, 0x06, 0x76, 0xac,
	0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xea, 0xc7, 0x98, 0xde, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FriendServiceClient is the client API for FriendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FriendServiceClient interface {
	AddFriend(ctx context.Context, in *Profile, opts ...grpc.CallOption) (*Result, error)
	DeleteFriend(ctx context.Context, in *Profile, opts ...grpc.CallOption) (*Result, error)
	GetFriends(ctx context.Context, in *Token, opts ...grpc.CallOption) (FriendService_GetFriendsClient, error)
}

type friendServiceClient struct {
	cc *grpc.ClientConn
}

func NewFriendServiceClient(cc *grpc.ClientConn) FriendServiceClient {
	return &friendServiceClient{cc}
}

func (c *friendServiceClient) AddFriend(ctx context.Context, in *Profile, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/task.FriendService/AddFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) DeleteFriend(ctx context.Context, in *Profile, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/task.FriendService/DeleteFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) GetFriends(ctx context.Context, in *Token, opts ...grpc.CallOption) (FriendService_GetFriendsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FriendService_serviceDesc.Streams[0], "/task.FriendService/GetFriends", opts...)
	if err != nil {
		return nil, err
	}
	x := &friendServiceGetFriendsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FriendService_GetFriendsClient interface {
	Recv() (*Profile, error)
	grpc.ClientStream
}

type friendServiceGetFriendsClient struct {
	grpc.ClientStream
}

func (x *friendServiceGetFriendsClient) Recv() (*Profile, error) {
	m := new(Profile)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FriendServiceServer is the server API for FriendService service.
type FriendServiceServer interface {
	AddFriend(context.Context, *Profile) (*Result, error)
	DeleteFriend(context.Context, *Profile) (*Result, error)
	GetFriends(*Token, FriendService_GetFriendsServer) error
}

// UnimplementedFriendServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFriendServiceServer struct {
}

func (*UnimplementedFriendServiceServer) AddFriend(ctx context.Context, req *Profile) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFriend not implemented")
}
func (*UnimplementedFriendServiceServer) DeleteFriend(ctx context.Context, req *Profile) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriend not implemented")
}
func (*UnimplementedFriendServiceServer) GetFriends(req *Token, srv FriendService_GetFriendsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFriends not implemented")
}

func RegisterFriendServiceServer(s *grpc.Server, srv FriendServiceServer) {
	s.RegisterService(&_FriendService_serviceDesc, srv)
}

func _FriendService_AddFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Profile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).AddFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.FriendService/AddFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).AddFriend(ctx, req.(*Profile))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_DeleteFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Profile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).DeleteFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.FriendService/DeleteFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).DeleteFriend(ctx, req.(*Profile))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_GetFriends_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Token)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FriendServiceServer).GetFriends(m, &friendServiceGetFriendsServer{stream})
}

type FriendService_GetFriendsServer interface {
	Send(*Profile) error
	grpc.ServerStream
}

type friendServiceGetFriendsServer struct {
	grpc.ServerStream
}

func (x *friendServiceGetFriendsServer) Send(m *Profile) error {
	return x.ServerStream.SendMsg(m)
}

var _FriendService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "task.FriendService",
	HandlerType: (*FriendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFriend",
			Handler:    _FriendService_AddFriend_Handler,
		},
		{
			MethodName: "DeleteFriend",
			Handler:    _FriendService_DeleteFriend_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFriends",
			Handler:       _FriendService_GetFriends_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "friend.proto",
}
